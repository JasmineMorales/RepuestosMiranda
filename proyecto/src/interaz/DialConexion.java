/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interaz;

import Excepciones.NoSePuedeEscribirArchivo;
import clases.*;
import static interaz.Seguridad.claveCifrado;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

/**
 *
 * 
 */
public class DialConexion extends javax.swing.JDialog {

    /**
     * Creates new form DialConexion
     */
    public DialConexion(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    public void limpiar(){
        //Limpiamos los campos de texto
        ipField.setText("");
        userField.setText("");
        passField.setText("");
        passField1.setText("");
        bdField.setText("");     
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        conexionPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        ipField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bdField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        userField = new javax.swing.JTextField();
        passField1 = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        cancelarGesButton = new javax.swing.JLabel();
        probarDBButton = new javax.swing.JLabel();
        guardarDBButton = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lbl_Titulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        conexionPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(96, 96, 96)));
        conexionPanel.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(64, 64, 64));
        jLabel4.setText("Usuario del SGBD:");

        passField.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        passField.setSelectedTextColor(new java.awt.Color(64, 64, 64));
        passField.setSelectionColor(new java.awt.Color(192, 192, 192));

        jLabel1.setBackground(new java.awt.Color(96, 96, 96));
        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(64, 64, 64));
        jLabel1.setText("Dirección del servidor:");

        ipField.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        ipField.setSelectedTextColor(new java.awt.Color(64, 64, 64));
        ipField.setSelectionColor(new java.awt.Color(192, 192, 192));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(64, 64, 64));
        jLabel2.setText("Contraseña:");

        bdField.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        bdField.setSelectedTextColor(new java.awt.Color(64, 64, 64));
        bdField.setSelectionColor(new java.awt.Color(192, 192, 192));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(64, 64, 64));
        jLabel3.setText("Nombre de la BD:");

        userField.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        userField.setSelectedTextColor(new java.awt.Color(64, 64, 64));
        userField.setSelectionColor(new java.awt.Color(192, 192, 192));

        passField1.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        passField1.setSelectedTextColor(new java.awt.Color(64, 64, 64));
        passField1.setSelectionColor(new java.awt.Color(192, 192, 192));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(64, 64, 64));
        jLabel9.setText("Confirme contraseña:");

        cancelarGesButton.setBackground(new java.awt.Color(255, 51, 51));
        cancelarGesButton.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        cancelarGesButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelarGesButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cancelarGesButton.setText("Cerrar");
        cancelarGesButton.setOpaque(true);
        cancelarGesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelarGesButtonMouseClicked(evt);
            }
        });

        probarDBButton.setBackground(new java.awt.Color(255, 51, 51));
        probarDBButton.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        probarDBButton.setForeground(new java.awt.Color(255, 255, 255));
        probarDBButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        probarDBButton.setText("Probar");
        probarDBButton.setOpaque(true);
        probarDBButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                probarDBButtonMouseClicked(evt);
            }
        });

        guardarDBButton.setBackground(new java.awt.Color(255, 51, 51));
        guardarDBButton.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        guardarDBButton.setForeground(new java.awt.Color(255, 255, 255));
        guardarDBButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        guardarDBButton.setText("Guardar");
        guardarDBButton.setOpaque(true);
        guardarDBButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardarDBButtonMouseClicked(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(96, 96, 96));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(96, 96, 96)));

        lbl_Titulo.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lbl_Titulo.setForeground(new java.awt.Color(255, 255, 255));
        lbl_Titulo.setText("CONEXIÓN");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(lbl_Titulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Titulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout conexionPanelLayout = new javax.swing.GroupLayout(conexionPanel);
        conexionPanel.setLayout(conexionPanelLayout);
        conexionPanelLayout.setHorizontalGroup(
            conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conexionPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(conexionPanelLayout.createSequentialGroup()
                        .addComponent(probarDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(guardarDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelarGesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(conexionPanelLayout.createSequentialGroup()
                        .addGroup(conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passField1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bdField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 36, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        conexionPanelLayout.setVerticalGroup(
            conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conexionPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(passField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(conexionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(probarDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardarDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarGesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(conexionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(conexionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    @Override
    public void setVisible(boolean b)
    {
        this.setLocationRelativeTo(null);
        super.setVisible(b);
    }
    private void cancelarGesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarGesButtonMouseClicked
        this.setVisible(false);
    }//GEN-LAST:event_cancelarGesButtonMouseClicked

    private void probarDBButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_probarDBButtonMouseClicked
        if(!ipField.getText().trim().equals("")&&!userField.getText().trim().equals("")&&!new String(passField.getPassword()).trim().equals("")&&!bdField.getText().equals("")){
            if(new String(passField.getPassword()).trim().equals(new String(passField1.getPassword()).trim())){
                Conexion prueba= new Conexion(userField.getText(), ipField.getText(), new String(passField.getPassword()),bdField.getText());
                if(prueba.probarConexion()){
                    DialogoOpcion dialogo = new DialogoOpcion(null, true, DialogoOpcion.ICONO_INFORMACION, "Conexion Exitosa", "Esta configuración es correcta\nSE PUEDE CONECTAR AL SGBD");
                    dialogo.setVisible(true);
                }else{
                    DialogoOpcion dialogo = new DialogoOpcion(null, true, DialogoOpcion.ICONO_ERROR, "Conexion Fallida", "Esta configuración NO es correcta\nNO se puede conectar al SGBD");
                    dialogo.setVisible(true);
                }
            }else{
                DialogoOpcion dialogo = new DialogoOpcion(null, true, DialogoOpcion.ICONO_ERROR, "Llene los campos correctamente", "Las contraseñas no coinciden");
                dialogo.setVisible(true);
                passField.setText("");
                passField1.setText("");
                passField.requestFocus();
            }
        }
    }//GEN-LAST:event_probarDBButtonMouseClicked

    private void guardarDBButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarDBButtonMouseClicked
        if(!ipField.getText().trim().equals("")&&!userField.getText().trim().equals("")&&!new String(passField.getPassword()).trim().equals("")&&!bdField.getText().equals("")){
            if(new String(passField.getPassword()).trim().equals(new String(passField1.getPassword()).trim())){
                try {
                    // Generamos una clave que queramos que tenga al menos 16 bytes adecuada para AES
                    Key key = new SecretKeySpec(claveCifrado.getBytes(),  0, 16, "AES");
                    // Se obtiene un cifrador AES
                    Cipher aes = Cipher.getInstance("AES/ECB/PKCS5Padding");
                    // Se inicializa el cifrador, se pone en modo de cifrado y se le envia la clave
                    aes.init(Cipher.ENCRYPT_MODE,key);
                    // Se encripta
                    byte[] encriptado=aes.doFinal(new String(passField.getPassword()).getBytes());
                    //Se crea un nuevo servidor, enviando los datos nuevos y se escribe la configuracion al archivo
                    Server server=new Server(ipField.getText(), userField.getText(),encriptado , bdField.getText());
                    server.escribirArchivo(Server.SERVER_CONFIG_DEFAULT_FILE);
                    DialogoOpcion dialogo = new DialogoOpcion(null, true, DialogoOpcion.ICONO_INFORMACION, "Escritura exitosa", "Archivo Escrito");
                    dialogo.setVisible(true);
                    //Limpiamos el formulario
                    limpiar();
                } catch (NoSePuedeEscribirArchivo | NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {
                    DialogoOpcion dialogo = new DialogoOpcion(null, true, DialogoOpcion.ICONO_ERROR, "Escritura exitosa", ex.toString());
                    dialogo.setVisible(true);
                }
            }
            else{
                DialogoOpcion dialogo = new DialogoOpcion(null, true, DialogoOpcion.ICONO_ERROR, "Llene los campos correctamente", "Las contraseñas no coinciden");
                dialogo.setVisible(true);
                passField.setText("");
                passField1.setText("");
                passField.requestFocus();
            }
        }
        else{
            DialogoOpcion dialogo= new DialogoOpcion(null, true, DialogoOpcion.ICONO_ERROR, "Error", "Debe llenar todos los campos");
            dialogo.setVisible(true);
        }
    }//GEN-LAST:event_guardarDBButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialConexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialConexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialConexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialConexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialConexion dialog = new DialConexion(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bdField;
    private javax.swing.JLabel cancelarGesButton;
    private javax.swing.JPanel conexionPanel;
    private javax.swing.JLabel guardarDBButton;
    private javax.swing.JTextField ipField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbl_Titulo;
    private javax.swing.JPasswordField passField;
    private javax.swing.JPasswordField passField1;
    private javax.swing.JLabel probarDBButton;
    private javax.swing.JTextField userField;
    // End of variables declaration//GEN-END:variables
}
